import json, openai, re

# Load rules
with open("rules.json", encoding="utf-8") as f:
    RULES = json.load(f)

def rule_id(idx: int) -> str:
    return f"R{idx+1:03d}"

BATCH_SIZE = 40

# Initial COBOL source code (fill in your original code)
cobol_source = """..."""  # Put your COBOL code here

client = openai.OpenAI()

all_step1_rows = []
all_diff_blocks = []

def parse_diff_blocks_by_codeblock(output):
    """
    Extract each diff block (delimited by ```diff ... ```) as a multi-line string.
    Returns a list of diff block strings.
    """
    pattern = r"```diff\s*\n(.*?)```"
    return re.findall(pattern, output, re.DOTALL)

def apply_simple_diff_blocks(src_code, diff_blocks):
    """
    Apply all diff blocks to the code string.
    Each block: contiguous -/+ lines.
    For each block, strictly find the sequence of '-' lines in code and replace as a group with the sequence of '+' lines.
    """
    code_lines = src_code.splitlines()
    for block in diff_blocks:
        minus_lines = [l[1:].rstrip() for l in block.splitlines() if l.startswith('-')]
        plus_lines = [l[1:].rstrip() for l in block.splitlines() if l.startswith('+')]
        n = len(minus_lines)
        found = False
        # Scan code for exact matching minus block
        for i in range(len(code_lines) - n + 1):
            window = [line.rstrip() for line in code_lines[i:i+n]]
            if window == minus_lines:
                # Replace minus_lines with plus_lines
                code_lines = code_lines[:i] + plus_lines + code_lines[i+n:]
                found = True
                break
        if not found:
            print("[WARN] Could not apply diff block:\n", block)
    return '\n'.join(code_lines)

for batch_start in range(0, len(RULES), BATCH_SIZE):
    batch_rules = RULES[batch_start:batch_start+BATCH_SIZE]
    batch_summary = "\n".join(
        f"[{rule_id(batch_start+j)}] {r['summary']}" for j, r in enumerate(batch_rules)
    )
    rules_text = "\n\n".join(
        f"[{rule_id(batch_start+j)}]\nContent: {r['content']}\nExample: {r['example']}"
        for j, r in enumerate(batch_rules)
    )

    # Prompt model to output each correction in a separate diff code block
    user_prompt = (
        "Check the following COBOL source code according to ONLY the rules above.\n"
        "Output all violations in the following table format:\n"
        "| Line Number | Rule ID | Rule Description |\n"
        "| ------ | ----------- | ---------------- |\n"
        "For each correction, output the diff as a separate code block using ```diff ... ``` format. "
        "Each code block should only include one change location, using '-' (delete) and '+' (add) lines. "
        "Do not output explanations, patch headers, or the entire modified code. "
        "For example:\n\n"
        "```diff\n-OLD LINE\n+NEW LINE\n```\n"
        "```diff\n-FOO\n+BAR\n```\n"
        f"{cobol_source}"
    )

    system_prompt = (
        "You are a COBOL code reviewer. In this task, only use the following coding rules for checking.\n"
        "Rule Summaries:\n"
        f"{batch_summary}\n\n"
        "Rule Details (with examples):\n"
        f"{rules_text}\n\n"
        "Always strictly refer to the rules above when identifying and explaining code violations."
    )

    resp = client.chat.completions.create(
        model="gpt-4o-2024-05-13",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
    )
    output = resp.choices[0].message.content

    # --- Parse Step1 Table (optional) ---
    step1_rows = []
    for line in output.splitlines():
        if line.strip().startswith("|") and not "------" in line:
            cols = [c.strip() for c in line.strip().split("|")[1:-1]]
            if len(cols) == 3 and cols[0].isdigit():
                step1_rows.append(tuple(cols))
    all_step1_rows.extend(step1_rows)

    # --- Parse and Apply diff code blocks ---
    diff_blocks = parse_diff_blocks_by_codeblock(output)
    cobol_source = apply_simple_diff_blocks(cobol_source, diff_blocks)
    all_diff_blocks.extend(diff_blocks)

# The final corrected COBOL code string
print("【Final Corrected COBOL Code】\n")
print(cobol_source)

print("\n【All Diff Code Blocks】\n")
for block in all_diff_blocks:
    print("```diff")
    print(block)
    print("```\n" + "="*40)
